include("Constants.jl")


struct Grid
    height::Int64
    width::Int64
    matrix::Array{Array{Char,1},1}
    label::String
    generation::Int64
end


function create_random_grid(height::Int64, width::Int64, alive_probability::Float64)

    alive_probability *= 100
    grid_matrix::Array{Array{Char,1},1} = []

    for i in 1:height
        row::Array{Char,1} = []
        for j in 1:width
            if rand(1:100) % 100 > alive_probability
                push!(row, DEAD_CELL_CHARACTER)
            else
                push!(row, ALIVE_CELL_CHARACTER)
            end
        end
        push!(grid_matrix, row)
    end

    return Grid(height, width, grid_matrix, "Grid Aleat√≥rio", 1)
end


function create_pulsar_grid()

    grid_matrix::Array{Array{Char,1},1} = [
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER,DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
    ]

    return Grid(17, 17, grid_matrix, "Grid Pulsante", 1)
end


function create_decathlon_grid()

    grid_matrix::Array{Array{Char,1},1} = [
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER]
    ]

    return Grid(18, 11, grid_matrix, "Grid Decathlon", 1)
end


function create_clock_grid()
    
    grid_matrix::Array{Array{Char,1},1} = [
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER]
    ]

    return Grid(14, 14, grid_matrix, "Grid Rel√≥gio", 1)
end


function create_galaxy_grid()

    grid_matrix::Array{Array{Char,1},1} = [
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, ALIVE_CELL_CHARACTER, ALIVE_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER],
        [DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER, DEAD_CELL_CHARACTER]
    ]

    return Grid(15, 15, grid_matrix, "Grid Gal√°xia", 1)
end


function create_user_grid()

    run(`clear`);

    print("\nDigite a altura do grid: ")
    height::Int64 = parse(Int64, readline())
    print("Digite a largura do grid: ")
    width::Int64 = parse(Int64, readline())

    grid_matrix::Array{Array{Char,1},1} = []

    for i in 1:height
        grid_row::Array{Char,1} = []
        for j in 1:width
            push!(grid_row, DEAD_CELL_CHARACTER)
        end
        push!(grid_matrix, grid_row)
    end

    print("\nDigite o grid, linha a linha, SEM separar as colunas por espa√ßos (caracteres permitidos: ")
    print(ALIVE_CELL_CODE)
    print("='c√©lula viva', ")
    print(DEAD_CELL_CODE)
    println("='c√©lula morta')")

    for i in 1:height
        line = readline()
        for j in 1:width
            grid_matrix[i][j] = line[j] == ALIVE_CELL_CODE ? ALIVE_CELL_CHARACTER : DEAD_CELL_CHARACTER
        end
    end

    return Grid(height, width, grid_matrix, "Grid Personalizado", 1)
end


function print_grid(grid::Grid)

    run(`clear`);

    println(string("-> ", grid.label, " - ", string(grid.generation), "¬∞ gera√ß√£o:\n"))

    for i in 1:grid.height
        for j in 1:grid.width
            print(grid.matrix[i][j])
        end
        println()
    end

end


function count_neighbors(grid::Grid, i::Int64, j::Int64)

    total_neighbors = 0

    for row in i-1:i+1 
        for col in j-1:j+1 
            if row >= 1 && row <= grid.height && col >= 1 && col <= grid.width
                total_neighbors = grid.matrix[row][col] == ALIVE_CELL_CHARACTER ? total_neighbors + 1 : total_neighbors
            end
        end
    end

    return grid.matrix[i][j] == ALIVE_CELL_CHARACTER ? total_neighbors - 1 : total_neighbors
end


function apply_underpopulation_rule(grid::Grid, i::Int64, j::Int64, matrix_copy::Array{Array{Char,1},1})

    total_neighbors = count_neighbors(grid, i, j)

    if total_neighbors < 2
        matrix_copy[i][j] = DEAD_CELL_CHARACTER
    end

end


function apply_overpopulation_rule(grid::Grid, i::Int64, j::Int64, matrix_copy::Array{Array{Char,1},1})

    total_neighbors = count_neighbors(grid, i, j)

    if total_neighbors > 3
        matrix_copy[i][j] = DEAD_CELL_CHARACTER
    end

end


function apply_resuscitation_rule(grid::Grid, i::Int64, j::Int64, matrix_copy::Array{Array{Char,1},1})

    total_neighbors = count_neighbors(grid, i, j)

    if total_neighbors == 3
        matrix_copy[i][j] = ALIVE_CELL_CHARACTER
    end

end


function copy_matrix(source_matrix::Array{Array{Char,1},1}, height::Int64, width::Int64)

    matrix_cpy::Array{Array{Char,1},1} = []

    for i in 1:height
        row_cpy::Array{Char,1} = []
        for j in 1:width
            push!(row_cpy, source_matrix[i][j])
        end
        push!(matrix_cpy, row_cpy)
    end

    return matrix_cpy
end


function apply_rules(grid::Grid)

    matrix_cpy = copy_matrix(grid.matrix, grid.height, grid.width)

    for i in 1:grid.height
        for j in 1:grid.width
            if grid.matrix[i][j] == DEAD_CELL_CHARACTER
                apply_resuscitation_rule(grid, i, j, matrix_cpy)
            else
                apply_underpopulation_rule(grid, i, j, matrix_cpy)
                apply_overpopulation_rule(grid, i, j, matrix_cpy)
            end
        end
    end

    return Grid(grid.height, grid.width, matrix_cpy, grid.label, grid.generation + 1)

end
